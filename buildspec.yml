version: 0.2

phases:
  install:
    commands:
      # Install dependencies needed for running tests
      - cd second
      - npm install
      - cd ../first
      - npm install
      - cd ../

      # Make sure we have GIT information as env variables
      - chmod +x ./code-build-extras.sh && ./code-build-extras.sh > __env_vars.sh && . ./__env_vars.sh && rm ./__env_vars.sh

      # We add a file names commit.txt with the git info
      - echo "GIT_COMMIT=\"${GIT_COMMIT}\"" > commit.txt
      - echo "GIT_BRANCH=\"${GIT_BRANCH}\"" >> commit.txt
      - echo "GIT_PULL_REQUEST=\"${GIT_PULL_REQUEST}\"" >> commit.txt

      # Determine the environment id to use for the zip and pipeline
      - export ENV_ID=""
      - export ZIP_NAME=""
      - export PIPELINE_NAME=""
      - |
        if expr "${GIT_BRANCH}" : "dev" >/dev/null; then
          export ENV_ID="dev"
          export ZIP_NAME="dev.zip"
          # export PIPELINE_NAME="$PIPELINE_NAME_PREFIX-dev-pipeline"
        fi
        if expr "${GIT_BRANCH}" : "master" >/dev/null; then
          export ENV_ID="int"
          export ZIP_NAME="int.zip"
          export PIPELINE_NAME="$PIPELINE_NAME_PREFIX-int-pipeline"
        fi
        if expr "${GIT_BRANCH}" : "release-*" >/dev/null; then
          export ENV_ID="prod"
          export ZIP_NAME="prod.zip"
          export PIPELINE_NAME="$PIPELINE_NAME_PREFIX-prod-pipeline"
        fi

      # For pull requests clear deployment variables
      - |
        if expr "${GIT_PULL_REQUEST}" : "true" >/dev/null; then
          export ZIP_NAME=""
          export PIPELINE_NAME=""
          echo "CHANGING PIPELINE_NAME TO NULL IN PULL REQUEST"
        fi

      # Echo variables for debugging purposes
      - cat commit.txt
      - echo "ENV_ID=${ENV_ID}"
      - echo "ZIP_NAME=${ZIP_NAME}"
      - echo "PIPELINE_NAME=${PIPELINE_NAME}"

      # Upgrade AWS CLI to the latest version
      - pip install --upgrade awscli
#  pre_build:
#    commands:
      # Discover and run unit tests in the 'tests' directory
      #- npm test
  build:
    commands:
      - |
        if expr "${ZIP_NAME}" != "" >/dev/null; then
          # Build for production
          cd second
          rm -rf node_modules
          npm install --production

          cd ../first
          rm -rf node_modules
          npm install --production

          cd ..

          # Remove unnecessary files
#          rm -rf .git
#          rm code-build-extras.sh
#          rm ci-cd.yaml
#          rm buildspec.yml
#          rm .gitignore
#          rm README.md

          # Package source code to S3 and generate Output SAM template
          aws cloudformation package --template-file $SAM_TEMPLATE_IN --s3-bucket "$S3_BUCKET" --s3-prefix "$S3_BUILDS_PREFIX/$GIT_NAME" --output-template-file $SAM_TEMPLATE_OUT --kms-key-id $CODEBUILD_KMS_KEY_ID

          # Zip the deployable
          zip $ZIP_NAME $SAM_TEMPLATE_IN $SAM_TEMPLATE_OUT commit.txt

          # Upload the deployable
          aws s3api put-object --bucket $S3_BUCKET --key "$S3_ARTIFACTS_PREFIX/$ZIP_NAME" --body $ZIP_NAME --ssekms-key-id $CODEBUILD_KMS_KEY_ID --server-side-encryption aws:kms
        fi
  post_build:
    commands:
      # Run the pipeline
      - |
        if expr "${PIPELINE_NAME}" != "" >/dev/null; then
          # Start the pipeline
          aws codepipeline start-pipeline-execution --name $PIPELINE_NAME
        fi